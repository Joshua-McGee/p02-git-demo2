/*Grid.css is taken from a tutorial from Iat 235*/
/* 
	This tutorial draws from "Don't Overthink Grids" available at
	http://css-tricks.com/dont-overthink-it-grids/
	*/


/*
	With this selector, we are specifying that all objects use
	the border-box model (not the content-box model)
	*/
	*, *:after, *:before {
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		box-sizing: border-box;
	}


/*
	Here we are using a 'fancy' css selector that is 
	specifying if the class of an item starts with
	'grid-col-', then we should apply the styling listed
	*/
	[class^='grid-col-'] {
		float: left;
		padding: 0; 
		text-align: center; /* center the content in this block by default */
	}


/*
	Here we are defining our default column widths with the intention
	of keeping it 'mobile first'
	*/
	.grid-col-5of10, .grid-col-2of10, .grid-col-1of4, .grid-col-3of4 {
		width: 100%;
	}




/*
	Here we are clearing floated items to ensure that
	our 'grid' structure can have different rows
	*/
	.grid-row:after {
		content: "";
		display: block;
		clear: both;
	}



/*
	Using further @media queries, we specify that at a width of
	less than 30em it should collapse the 2/10 columns into one stack

	Think of this as saying, when display width > 30em, apply this
	*/


	@media (min-width: 10em){
		.banner{
			background-image: url(../img/mobile-banner.jpg);
		}
	}
	@media (min-width: 20em) {

		.grid-col-1of4 {
			width: 100%;
		}
		body{
			padding-top: 9rem;
		}
		.grid-col-3of4 {
			width: 100%;
		}

		.about-text {
			margin: 0;
			padding-top: 2rem;
			padding-left: .5rem;
			line-height: 150%;
		}

		.aboutIMG {
			margin: 0;
			padding-top: 1rem;
			padding-left: 1rem;
		}

		.banner{
			padding-top: 0rem;
			margin-top:-1.4rem;
			margin-right: -2rem;
			margin-left: -2rem;

		}

	}


	@media(min-width: 30em) {

		.about-text {
			margin: 0;
			padding-top: 3rem;
			padding-left: 1rem;
			line-height: 150%;
		}
		.banner{
			padding-top: .5rem;
			margin-top:-2rem;
			margin-right: -2rem;
			margin-left: -2rem;

		}
		.grid-col-1of4 {
			width: 50%;
		}

		.grid-col-3of4 {
			width: 50%;
		}

		body{
			padding-top: 5rem;
		}

		@media(min-width: 40em) { 
			/*parse error line 137 ask andrew, no clue how to fix*/
			.banner{
				background-image: url(../img/online-banner.jpg);
				padding-top: -4rem;
				margin-top:-4rem;
				margin-bottom: -2rem;
				}
			}


		@media(min-width: 60em) {

			.grid-col-1of4 {
				width: 25%;
			}

			.grid-col-3of4 {
				width: 75%;
			}
			.banner{
				
				margin-top:-4rem;
				margin-right: -2rem;
				margin-left: -2rem;
				margin-bottom: 0;
			}

			.about-text {
				margin: 0;
				padding-top: 6rem;
				padding-left: 4rem;
				line-height: 150%;
			}
			body{
				padding-top: 2.5rem;
			}

		}

		@media (min-width: 70em) {

			.grid-col-1of4 {
				width: 25%;
			}
			.grid-col-3of4 {
				width: 75%;
			}
			body{
				padding-top: 2.5rem;
			}

			.about-text {
				margin: 0;
				padding-top: 10rem;
				padding-left: 8rem;
				line-height: 150%;
			}



		}



/*
	Here using @media queries, we are specifying when the display
	has a width less than 50em it should collapse the 5/10 columns 
	into one stack (hence width: 100%)

	Think of this as saying, when display width > 50em, apply this
	*/
	@media (min-width: 50em) {

		.grid-col-5of10 {
			width: 50%;
		}

		.grid-col-5of10:first-of-type {
			padding-right: 0.5em;
		}

		.grid-col-5of10:last-of-type {
			padding-left: 0.5em;
		}

	}





